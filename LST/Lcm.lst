C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LCM
OBJECT MODULE PLACED IN .\HEX\Lcm.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Lcm.c BROWSE DEBUG OBJECTEXTEND CODE SYMBOLS PRINT(.\LST\Lcm.lst) TABS(2) O
                    -BJECT(.\HEX\Lcm.obj)

line level    source

   1          /* LCM 4-位元 操作模式 */
   2          #include <reg51.h>
   3          #include "system.h"
   4          #include "lcm.h"
   5          
   6          #define LCM_LINE_NUM  2   //LCM 的列數
   7          #define LCM_LINE_CHARS  16    //LCM 的每列字數
   8          #define LCM_LINE1_START 0x80  //LCM 第 1 列起始位置
   9          #define LCM_LINE2_START 0xc0  //LCM 第 2 列起始位置
  10          #define LCM_LINE3_START 0x90  //LCM 第 3 列起始位置
  11          #define LCM_LINE4_START 0xD0  //LCM 第 4 列起始位置
  12          
  13          /* LCM 命令碼定義 */
  14          #define CMD_ClearDisplay  1
  15          #define CMD_EntryMode   4
  16            #define bCursorShiftR 2
  17            #define bEntireShift  1
  18          #define CMD_DisplayControl  0x8
  19            #define bDISPLAY_ON   4
  20            #define bCURSOR_ON    2
  21            #define bCURSOR_BLINK 1
  22          #define CMD_LocateCursor  0x80
  23          #define CMD_FunctionSet   0x20
  24            /* bBus8Bit : 設定介面資料的寬度
  25            設1時，使用8位元（DB7~DB0）來傳送或接收資料。
  26            設0時，則使用4位元（DB7~DB4）來傳送或接收資料 */
  27            #define bBus8Bit    0x10
  28            //bRow2 : 設定顯示列數。當0時，1列顯示。當1時，2列顯示。
  29            #define bRow2     8
  30            #define bSetPattern   4
  31          
  32          sbit LCD_B7 = P0^5; //LCM 資料埠位元7
  33          sbit LCD_B6 = P0^4; //LCM 資料埠位元6
  34          sbit LCD_B5 = P0^3; //LCM 資料埠位元5
  35          sbit LCD_B4 = P0^2; //LCM 資料埠位元4
  36          sbit LCD_RS = P0^0; //LCM RS 控制腳
  37          sbit LCD_EN = P0^1; //LCM EN 控制腳
  38          
  39          void InitLcdCommand(void);
  40          void LcdWriteCommand(unsigned char);
  41          void LcdWriteData(unsigned char);
  42          void LcdEnPulse(void);
  43          void Delayms(int);
  44          void DspHexNibble(unsigned char);
  45          void OutLcdPort(unsigned char);
  46          
  47          unsigned char DspCtrlCommand;
  48          
  49          /*----------------------------
  50            LCM 初始程序
  51          ----------------------------*/
  52          void LCD_Startup(void)
  53          {
  54   1        DspCtrlCommand = CMD_DisplayControl+bDISPLAY_ON+bCURSOR_ON+bCURSOR_BLINK;
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 2   

  55   1        LCD_EN = 0;
  56   1        LCD_RS = 0;
  57   1        
  58   1        OutLcdPort(0x30); //LCD軟體起始命令
  59   1        LcdEnPulse(); //寫入閂鎖脈衝
  60   1        OutLcdPort(0x30); //LCD軟體起始命令
  61   1        LcdEnPulse(); //寫入閂鎖脈衝
  62   1        OutLcdPort(0x30); //LCD軟體起始命令
  63   1        LcdEnPulse(); //寫入閂鎖脈衝
  64   1        OutLcdPort(0x20); //LCD軟體起始命令
  65   1        LcdEnPulse(); //寫入閂鎖脈衝
  66   1        
  67   1        InitLcdCommand(); //LCD狀態初始
  68   1        
  69   1        Delayms(100); //延遲
  70   1      }
  71          
  72          /*--------------------------------------------------
  73           設定游標位置
  74          --------------------------------------------------*/
  75          void LocateCursor(unsigned char loc_x, unsigned char loc_y)
  76          {
  77   1        if(loc_y == 0)  //檢查是否是第1列
  78   1          loc_x += LCM_LINE1_START; //加上第1列的行位置基準
  79   1        else if(loc_y == 1) //檢查是否是第2列
  80   1          loc_x += LCM_LINE2_START; //加上第2列的行位置基準
  81   1        else if(loc_y == 2) //檢查是否是第3列
  82   1          loc_x += LCM_LINE3_START; //加上第3列的行位置基準
  83   1        else  //第4列
  84   1          loc_x += LCM_LINE4_START; //加上第4列的行位置基準
  85   1          
  86   1        LcdWriteCommand(loc_x); //寫入定位命令
  87   1      }
  88          
  89          /*--------------------------------------------------
  90           游標顯示或關閉
  91          --------------------------------------------------*/
  92          void CursorDisplay(bit cursw)
  93          {
  94   1        DspCtrlCommand &= ~(bCURSOR_ON+bCURSOR_BLINK);
  95   1        if (cursw)
  96   1          DspCtrlCommand |= (bCURSOR_ON+bCURSOR_BLINK);
  97   1        LcdWriteCommand(DspCtrlCommand);  //寫入顯示控制命令
  98   1      }
  99          
 100          /*-------------------------------------------------
 101            顯示十六進制位元組至指定位置
 102          --------------------------------------------------*/
 103          void DspLocHexByte(unsigned char loc_x, unsigned char loc_y, unsigned char lcm_hex)
 104          {
 105   1        LocateCursor(loc_x,loc_y);  //游標定位
 106   1        DspHexNibble(lcm_hex >> 4); //顯示高4位元
 107   1        DspHexNibble(lcm_hex & 0xf);  //顯示低4位元
 108   1      }
 109          
 110          /*-------------------------------------------------
 111            顯示十進制字組至指定位置
 112          --------------------------------------------------*/
 113          void DspLocDecWord(unsigned char loc_x, unsigned char loc_y, unsigned int dec_word, unsigned char digi, bi
             -t fhdig)
 114          {
 115   1        LocateCursor(loc_x,loc_y);  //游標定位
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 3   

 116   1        DspDecWord(dec_word, digi, fhdig);
 117   1      }
 118          
 119          /*-------------------------------------------------
 120            顯示十進制位元組至指定位置
 121            loc_x   : 顯示的 x 位置
 122            loc_y   : 顯示的 y 位置
 123            dec_byte  : 顯示的位元組值
 124            digi    : 顯示多少數位
 125            fhdig   : 最左數位零是否顯示
 126          --------------------------------------------------*/
 127          void DspLocDecByte(unsigned char loc_x,unsigned char loc_y,unsigned char dec_byte,unsigned char digi,bit f
             -hdig)
 128          {
 129   1        LocateCursor(loc_x,loc_y);  //游標定位
 130   1        DspDecByte(dec_byte,digi,fhdig);  //顯示十進位值
 131   1      }
 132          
 133          /*-------------------------------------------------
 134            顯示字元至指定位置
 135          --------------------------------------------------*/
 136          void DspLocChar(unsigned char loc_x, unsigned char loc_y, unsigned char c)
 137          {
 138   1        LocateCursor(loc_x,loc_y);  //游標定位
 139   1        DisplayChar(c); //顯示字元
 140   1      }
 141          /*-------------------------------------------------
 142            顯示字串至指定位置
 143          --------------------------------------------------*/
 144          void DspLocString(unsigned char loc_x, unsigned char loc_y, unsigned char *str)
 145          {
 146   1        LocateCursor(loc_x,loc_y);  //游標定位
 147   1        DisplayString(str); //顯示字串
 148   1      }
 149          
 150          /*-------------------------------------------------
 151            顯示字串至目前位置
 152          --------------------------------------------------*/
 153          void DisplayString(unsigned char *str)
 154          {
 155   1        while (*str != 0) //字串迴圈
 156   1          DisplayChar(*str++);  //顯示字元                              
 157   1      }
 158          
 159          /*-------------------------------------------------
 160            顯示十六進制字組至指定位置
 161          --------------------------------------------------*/
 162          void DspHexWord(unsigned int lcm_hex)
 163          {
 164   1        DspHexByte(lcm_hex >> 8); //顯示高位元組
 165   1        DspHexByte(lcm_hex & 0xff); //顯示低位元組
 166   1      }
 167          
 168          /*-------------------------------------------------
 169            顯示十六進制位元組
 170          --------------------------------------------------*/
 171          void DspHexByte(unsigned char lcm_hex)
 172          {
 173   1        DspHexNibble(lcm_hex >> 4); //顯示高4位元
 174   1        DspHexNibble(lcm_hex & 0xf);  //顯示低4位元
 175   1      }
 176          
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 4   

 177          /*-------------------------------------------------
 178            顯示十進制字組
 179          --------------------------------------------------*/
 180          void DspDecWord(unsigned int dec_word, unsigned char digi, bit fhdig)
 181          {
 182   1        unsigned char hdig;
 183   1        unsigned int eten;
 184   1        unsigned char tcnt;
 185   1        
 186   1        while(digi != 0)  //位數處理迴圈
 187   1        {
 188   2          eten = 1; //10的倍數基值
 189   2          for(tcnt = 0; tcnt < digi-1; tcnt++)  //位數迴圈
 190   2            eten *= 10; //累計10的次方數值
 191   2            
 192   2          hdig = (unsigned int)dec_word/eten; //最高位數值
 193   2          if (!fhdig && (hdig == 0) && (digi != 1))
 194   2            DisplayChar(' '); //最左數位零顯示空白
 195   2          else
 196   2          {
 197   3            DspHexNibble(hdig); //顯示4位元值
 198   3            fhdig = 1;  //設定最高位數顯示旗號
 199   3          }
 200   2          dec_word -= (hdig*eten);  //減去已顯示的值
 201   2          digi--; //位數數量遞減
 202   2        }
 203   1      }
 204          
 205          /*-------------------------------------------------
 206            顯示十進制位元組
 207            dec_byte  : 顯示的位元組值
 208            digi    : 顯示多少數位
 209            fhdig   : 最左數位零是否顯示
 210          --------------------------------------------------*/
 211          void DspDecByte(unsigned char dec_byte, unsigned char digi, bit fhdig)
 212          {
 213   1        unsigned char hdig;
 214   1        unsigned char eten;
 215   1        unsigned char tcnt;
 216   1        
 217   1        while(digi != 0)  //位數處理迴圈
 218   1        {
 219   2          eten = 1; //10的倍數基值
 220   2          for(tcnt = 0; tcnt < digi-1; tcnt++)  //位數迴圈
 221   2            eten *= 10; //累計10的倍數值
 222   2            
 223   2          hdig = dec_byte/eten; //最高位數值
 224   2          if (!fhdig && (hdig == 0) && (digi != 1))
 225   2            DisplayChar(' '); //最左數位零顯示空白
 226   2          else
 227   2          {
 228   3            DspHexNibble(hdig); //顯示4位元值
 229   3            fhdig = 1;  //設定最高位數顯示旗號
 230   3          }
 231   2          dec_byte -= (hdig*eten);  //減去已顯示的值
 232   2          digi--; //位數數量遞減
 233   2        }
 234   1      }
 235          
 236          /*-------------------------------------------------
 237            顯示十六進制半位元組
 238          --------------------------------------------------*/
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 5   

 239          void DspHexNibble(unsigned char nibb_hex)
 240          {
 241   1        nibb_hex += '0';  //字元'0'開始
 242   1        if ( nibb_hex > '9' ) //檢查是否大於字元'9'
 243   1          nibb_hex += 7;  //跳至字元'A'開始
 244   1        DisplayChar(nibb_hex);  //顯示字元
 245   1      }
 246          
 247          /*-------------------------------------------------
 248            顯示字元
 249          --------------------------------------------------*/
 250          void DisplayChar(unsigned char chr)
 251          {
 252   1        LcdWriteData(chr);  //寫入字元資料
 253   1      }
 254          
 255          /*-------------------------------------------------
 256            清除顯示
 257          --------------------------------------------------*/
 258          void ClearDisplay(void)
 259          {
 260   1      #if 0
                LcdWriteCommand(0x01);
              #else
 263   1        unsigned char i,j;
 264   1        
 265   1        for(j = 0; j < LCM_LINE_NUM; j++) //列迴圈
 266   1        {
 267   2          LocateCursor(0,j);  //游標定位
 268   2          for (i = 0; i < LCM_LINE_CHARS; i++)  //行迴圈
 269   2            DisplayChar(' '); //顯示字元
 270   2        }
 271   1      #endif
 272   1      }
 273          
 274          /*-------------------------------------------------
 275            清除顯示
 276          --------------------------------------------------*/
 277          void ClearRowDisplay(unsigned char row)
 278          {
 279   1        unsigned char i;
 280   1        
 281   1        LocateCursor(0,row);  //游標定位
 282   1        for (i = 0; i < LCM_LINE_CHARS; i++)  //行迴圈
 283   1          DisplayChar(' '); //顯示字元
 284   1      }
 285          
 286          /*--------------------------------------------------
 287            顯示移位
 288          --------------------------------------------------*/
 289          void CursorShift(bit dir)
 290          {
 291   1        LcdWriteCommand((dir)? 0x14:0x10);
 292   1      }
 293          
 294          /*----------------------------*/
 295          void InitLcdCommand(void)
 296          {
 297   1        LcdWriteCommand(CMD_FunctionSet+bRow2); //設定 LCM 為 4-位元操作模式
 298   1        LcdWriteCommand(DspCtrlCommand);  //設定 LCM 顯示命令
 299   1        LcdWriteCommand(0x01);  //清除顯示
 300   1      }
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 6   

 301          
 302          /*------------------------------------------
 303            寫入命令到 LCM
 304          ------------------------------------------*/
 305          void LcdWriteCommand(unsigned char cmd)
 306          {
 307   1        //寫入高 4 位元
 308   1        OutLcdPort(cmd);  //輸出到I/O埠
 309   1        LCD_RS = 0;   //LCM 命令模式
 310   1        LcdEnPulse(); //寫入閂鎖脈衝
 311   1        
 312   1        //寫入低 4 位元
 313   1        cmd <<= 4;
 314   1        OutLcdPort(cmd);  //輸出到I/O埠
 315   1        LCD_RS = 0;   //LCM 命令模式
 316   1        LcdEnPulse(); //寫入閂鎖脈衝
 317   1      }
 318          
 319          /*------------------------------------------
 320            寫入資料到 LCM
 321          ------------------------------------------*/
 322          void LcdWriteData(unsigned char dat)
 323          {
 324   1        //寫入高 4 位元
 325   1        OutLcdPort(dat);  //輸出到I/O埠
 326   1        LCD_RS = 1;   //LCM 資料模式
 327   1        LcdEnPulse(); //寫入閂鎖脈衝
 328   1        
 329   1        //寫入低 4 位元
 330   1        dat <<= 4;
 331   1        OutLcdPort(dat);  //輸出到I/O埠
 332   1        LCD_RS = 1;   //LCM 資料模式
 333   1        LcdEnPulse(); //寫入閂鎖脈衝
 334   1      }
 335          
 336          /*------------------------------------------
 337            LCM 寫入閂鎖脈衝處理
 338          ------------------------------------------*/
 339          void LcdEnPulse(void)
 340          {
 341   1        unsigned char i;
 342   1        
 343   1        LCD_EN = 1; //High 信號
 344   1        for (i = 0; i<8; i++);  //延遲
 345   1        LCD_EN = 0; //Low 信號
 346   1        for (i = 0; i<8; i++);  //延遲
 347   1      }
 348          
 349          /*-----------------------------------------
 350            輸出到I/O埠
 351          -----------------------------------------*/
 352          void OutLcdPort(unsigned char dat)
 353          {
 354   1        LCD_B7 = (dat & 0x80) ? 1:0;  //送出 LCM 位元7
 355   1        LCD_B6 = (dat & 0x40) ? 1:0;  //送出 LCM 位元6
 356   1        LCD_B5 = (dat & 0x20) ? 1:0;  //送出 LCM 位元5
 357   1        LCD_B4 = (dat & 0x10) ? 1:0;  //送出 LCM 位元4
 358   1      }
 359          
 360          /*------------------------------------------
 361            指令延遲
 362          ------------------------------------------*/
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 7   

 363          //#if (XTAL == 12000000)
 364          #define DELAY_1MS 160 //使用 12MHz 振盪器時
 365          //#endif
 366          
 367          void Delayms(int ms)
 368          {
 369   1        unsigned int i,j;
 370   1        for (i = 0; i < ms; i++)  // 1 ms 計數延遲迴圈
 371   1        {
 372   2          for (j = 0; j < DELAY_1MS; j++);  //約 1 ms 的延遲迴圈
 373   2        }
 374   1      }
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION LCD_Startup (BEGIN)
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
0000 75000F      R     MOV     DspCtrlCommand,#0FH
                                           ; SOURCE LINE # 55
0003 C281              CLR     LCD_EN
                                           ; SOURCE LINE # 56
0005 C280              CLR     LCD_RS
                                           ; SOURCE LINE # 58
0007 7F30              MOV     R7,#030H
0009 120000      R     LCALL   _OutLcdPort
                                           ; SOURCE LINE # 59
000C 120000      R     LCALL   LcdEnPulse
                                           ; SOURCE LINE # 60
000F 7F30              MOV     R7,#030H
0011 120000      R     LCALL   _OutLcdPort
                                           ; SOURCE LINE # 61
0014 120000      R     LCALL   LcdEnPulse
                                           ; SOURCE LINE # 62
0017 7F30              MOV     R7,#030H
0019 120000      R     LCALL   _OutLcdPort
                                           ; SOURCE LINE # 63
001C 120000      R     LCALL   LcdEnPulse
                                           ; SOURCE LINE # 64
001F 7F20              MOV     R7,#020H
0021 120000      R     LCALL   _OutLcdPort
                                           ; SOURCE LINE # 65
0024 120000      R     LCALL   LcdEnPulse
                                           ; SOURCE LINE # 67
0027 120000      R     LCALL   InitLcdCommand
                                           ; SOURCE LINE # 69
002A 7F64              MOV     R7,#064H
002C 7E00              MOV     R6,#00H
002E 020000      R     LJMP    _Delayms
             ; FUNCTION LCD_Startup (END)

             ; FUNCTION _LocateCursor (BEGIN)
                                           ; SOURCE LINE # 75
;---- Variable 'loc_x' assigned to Register 'R7' ----
;---- Variable 'loc_y' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
0000 ED                MOV     A,R5
0001 7006              JNZ     ?C0002
                                           ; SOURCE LINE # 78
0003 7480              MOV     A,#080H
0005 2F                ADD     A,R7
0006 FF                MOV     R7,A
0007 8016              SJMP    ?C0003
0009         ?C0002:
                                           ; SOURCE LINE # 79
0009 BD0106            CJNE    R5,#01H,?C0004
                                           ; SOURCE LINE # 80
000C 74C0              MOV     A,#0C0H
000E 2F                ADD     A,R7
000F FF                MOV     R7,A
0010 800D              SJMP    ?C0003
0012         ?C0004:
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 9   

                                           ; SOURCE LINE # 81
0012 BD0206            CJNE    R5,#02H,?C0006
                                           ; SOURCE LINE # 82
0015 7490              MOV     A,#090H
0017 2F                ADD     A,R7
0018 FF                MOV     R7,A
0019 8004              SJMP    ?C0003
001B         ?C0006:
                                           ; SOURCE LINE # 84
001B 74D0              MOV     A,#0D0H
001D 2F                ADD     A,R7
001E FF                MOV     R7,A
001F         ?C0003:
                                           ; SOURCE LINE # 86
001F 020000      R     LJMP    _LcdWriteCommand
             ; FUNCTION _LocateCursor (END)

             ; FUNCTION CursorDisplay (BEGIN)
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
0000 5300FC      R     ANL     DspCtrlCommand,#0FCH
                                           ; SOURCE LINE # 95
0003 300003      R     JNB     cursw,?C0009
                                           ; SOURCE LINE # 96
0006 430003      R     ORL     DspCtrlCommand,#03H
0009         ?C0009:
                                           ; SOURCE LINE # 97
0009 AF00        R     MOV     R7,DspCtrlCommand
000B 020000      R     LJMP    _LcdWriteCommand
             ; FUNCTION CursorDisplay (END)

             ; FUNCTION _DspLocHexByte (BEGIN)
                                           ; SOURCE LINE # 103
0000 8B00        R     MOV     lcm_hex,R3
;---- Variable 'loc_y' assigned to Register 'R5' ----
;---- Variable 'loc_x' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
0002 120000      R     LCALL   _LocateCursor
                                           ; SOURCE LINE # 106
0005 E500        R     MOV     A,lcm_hex
0007 C4                SWAP    A
0008 540F              ANL     A,#0FH
000A FF                MOV     R7,A
000B 120000      R     LCALL   _DspHexNibble
                                           ; SOURCE LINE # 107
000E E500        R     MOV     A,lcm_hex
0010 540F              ANL     A,#0FH
0012 FF                MOV     R7,A
0013 020000      R     LJMP    _DspHexNibble
             ; FUNCTION _DspLocHexByte (END)

             ; FUNCTION _DspLocDecWord (BEGIN)
                                           ; SOURCE LINE # 113
0000 8A00        R     MOV     dec_word,R2
0002 8B00        R     MOV     dec_word+01H,R3
;---- Variable 'loc_y' assigned to Register 'R5' ----
;---- Variable 'loc_x' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
0004 120000      R     LCALL   _LocateCursor
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 10  

                                           ; SOURCE LINE # 116
0007 A200        R     MOV     C,fhdig
0009 9200        R     MOV     ?_DspDecWord?BIT,C
000B AD00        R     MOV     R5,digi
000D AF00        R     MOV     R7,dec_word+01H
000F AE00        R     MOV     R6,dec_word
0011 020000      R     LJMP    _DspDecWord
             ; FUNCTION _DspLocDecWord (END)

             ; FUNCTION _DspLocDecByte (BEGIN)
                                           ; SOURCE LINE # 127
0000 8B00        R     MOV     dec_byte,R3
;---- Variable 'loc_y' assigned to Register 'R5' ----
;---- Variable 'loc_x' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
0002 120000      R     LCALL   _LocateCursor
                                           ; SOURCE LINE # 130
0005 A200        R     MOV     C,fhdig
0007 9200        R     MOV     ?_DspDecByte?BIT,C
0009 AD00        R     MOV     R5,digi
000B AF00        R     MOV     R7,dec_byte
000D 020000      R     LJMP    _DspDecByte
             ; FUNCTION _DspLocDecByte (END)

             ; FUNCTION _DspLocChar (BEGIN)
                                           ; SOURCE LINE # 136
0000 8B00        R     MOV     c,R3
;---- Variable 'loc_y' assigned to Register 'R5' ----
;---- Variable 'loc_x' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0002 120000      R     LCALL   _LocateCursor
                                           ; SOURCE LINE # 139
0005 AF00        R     MOV     R7,c
0007 020000      R     LJMP    _DisplayChar
             ; FUNCTION _DspLocChar (END)

             ; FUNCTION _DspLocString (BEGIN)
                                           ; SOURCE LINE # 144
0000 8B00        R     MOV     str,R3
0002 8A00        R     MOV     str+01H,R2
0004 8900        R     MOV     str+02H,R1
;---- Variable 'loc_y' assigned to Register 'R5' ----
;---- Variable 'loc_x' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0006 120000      R     LCALL   _LocateCursor
                                           ; SOURCE LINE # 147
0009 AB00        R     MOV     R3,str
000B AA00        R     MOV     R2,str+01H
000D A900        R     MOV     R1,str+02H
000F 020000      R     LJMP    _DisplayString
             ; FUNCTION _DspLocString (END)

             ; FUNCTION _DisplayString (BEGIN)
                                           ; SOURCE LINE # 153
0000 8B00        R     MOV     str,R3
0002 8A00        R     MOV     str+01H,R2
0004 8900        R     MOV     str+02H,R1
                                           ; SOURCE LINE # 154
0006         ?C0016:
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 11  

                                           ; SOURCE LINE # 155
0006 AB00        R     MOV     R3,str
0008 AA00        R     MOV     R2,str+01H
000A A900        R     MOV     R1,str+02H
000C 120000      E     LCALL   ?C?CLDPTR
000F 6013              JZ      ?C0018
                                           ; SOURCE LINE # 156
0011 0500        R     INC     str+02H
0013 E500        R     MOV     A,str+02H
0015 7002              JNZ     ?C0080
0017 0500        R     INC     str+01H
0019         ?C0080:
0019 14                DEC     A
001A F9                MOV     R1,A
001B 120000      E     LCALL   ?C?CLDPTR
001E FF                MOV     R7,A
001F 120000      R     LCALL   _DisplayChar
0022 80E2              SJMP    ?C0016
                                           ; SOURCE LINE # 157
0024         ?C0018:
0024 22                RET     
             ; FUNCTION _DisplayString (END)

             ; FUNCTION _DspHexWord (BEGIN)
                                           ; SOURCE LINE # 162
0000 8E00        R     MOV     lcm_hex,R6
0002 8F00        R     MOV     lcm_hex+01H,R7
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
0004 E500        R     MOV     A,lcm_hex
0006 FF                MOV     R7,A
0007 120000      R     LCALL   _DspHexByte
                                           ; SOURCE LINE # 165
000A AF00        R     MOV     R7,lcm_hex+01H
000C E500        R     MOV     A,lcm_hex+01H
000E 020000      R     LJMP    _DspHexByte
             ; FUNCTION _DspHexWord (END)

             ; FUNCTION _DspHexByte (BEGIN)
                                           ; SOURCE LINE # 171
0000 8F00        R     MOV     lcm_hex,R7
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
0002 E500        R     MOV     A,lcm_hex
0004 C4                SWAP    A
0005 540F              ANL     A,#0FH
0007 FF                MOV     R7,A
0008 120000      R     LCALL   _DspHexNibble
                                           ; SOURCE LINE # 174
000B E500        R     MOV     A,lcm_hex
000D 540F              ANL     A,#0FH
000F FF                MOV     R7,A
0010 020000      R     LJMP    _DspHexNibble
             ; FUNCTION _DspHexByte (END)

             ; FUNCTION _DspDecWord (BEGIN)
                                           ; SOURCE LINE # 180
0000 8E00        R     MOV     dec_word,R6
0002 8F00        R     MOV     dec_word+01H,R7
0004 8D00        R     MOV     digi,R5
                                           ; SOURCE LINE # 181
0006         ?C0021:
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 12  

                                           ; SOURCE LINE # 186
0006 E500        R     MOV     A,digi
0008 6065              JZ      ?C0028
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
000A 750000      R     MOV     eten,#00H
000D 750001      R     MOV     eten+01H,#01H
                                           ; SOURCE LINE # 189
;---- Variable 'tcnt' assigned to Register 'R3' ----
0010 E4                CLR     A
0011 FB                MOV     R3,A
0012         ?C0023:
0012 E500        R     MOV     A,digi
0014 14                DEC     A
0015 FF                MOV     R7,A
0016 EB                MOV     A,R3
0017 C3                CLR     C
0018 9F                SUBB    A,R7
0019 5012              JNC     ?C0024
                                           ; SOURCE LINE # 190
001B AE00        R     MOV     R6,eten
001D AF00        R     MOV     R7,eten+01H
001F 7C00              MOV     R4,#00H
0021 7D0A              MOV     R5,#0AH
0023 120000      E     LCALL   ?C?IMUL
0026 8E00        R     MOV     eten,R6
0028 8F00        R     MOV     eten+01H,R7
002A 0B                INC     R3
002B 80E5              SJMP    ?C0023
002D         ?C0024:
                                           ; SOURCE LINE # 192
002D AC00        R     MOV     R4,eten
002F AD00        R     MOV     R5,eten+01H
0031 AE00        R     MOV     R6,dec_word
0033 AF00        R     MOV     R7,dec_word+01H
0035 120000      E     LCALL   ?C?UIDIV
0038 8F00        R     MOV     hdig,R7
                                           ; SOURCE LINE # 193
003A 200011      R     JB      fhdig,?C0026
003D E500        R     MOV     A,hdig
003F 700D              JNZ     ?C0026
0041 E500        R     MOV     A,digi
0043 6401              XRL     A,#01H
0045 6007              JZ      ?C0026
                                           ; SOURCE LINE # 194
0047 7F20              MOV     R7,#020H
0049 120000      R     LCALL   _DisplayChar
004C 8007              SJMP    ?C0027
004E         ?C0026:
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
004E AF00        R     MOV     R7,hdig
0050 120000      R     LCALL   _DspHexNibble
                                           ; SOURCE LINE # 198
0053 D200        R     SETB    fhdig
                                           ; SOURCE LINE # 199
0055         ?C0027:
                                           ; SOURCE LINE # 200
0055 AF00        R     MOV     R7,hdig
0057 7E00              MOV     R6,#00H
0059 AC00        R     MOV     R4,eten
005B AD00        R     MOV     R5,eten+01H
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 13  

005D 120000      E     LCALL   ?C?IMUL
0060 C3                CLR     C
0061 E500        R     MOV     A,dec_word+01H
0063 9F                SUBB    A,R7
0064 F500        R     MOV     dec_word+01H,A
0066 E500        R     MOV     A,dec_word
0068 9E                SUBB    A,R6
0069 F500        R     MOV     dec_word,A
                                           ; SOURCE LINE # 201
006B 1500        R     DEC     digi
                                           ; SOURCE LINE # 202
006D 8097              SJMP    ?C0021
                                           ; SOURCE LINE # 203
006F         ?C0028:
006F 22                RET     
             ; FUNCTION _DspDecWord (END)

             ; FUNCTION _DspDecByte (BEGIN)
                                           ; SOURCE LINE # 211
0000 8F00        R     MOV     dec_byte,R7
0002 8D00        R     MOV     digi,R5
                                           ; SOURCE LINE # 212
0004         ?C0029:
                                           ; SOURCE LINE # 217
0004 E500        R     MOV     A,digi
0006 604B              JZ      ?C0036
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0008 750001      R     MOV     eten,#01H
                                           ; SOURCE LINE # 220
;---- Variable 'tcnt' assigned to Register 'R7' ----
000B E4                CLR     A
000C FF                MOV     R7,A
000D         ?C0031:
000D E500        R     MOV     A,digi
000F 14                DEC     A
0010 FE                MOV     R6,A
0011 EF                MOV     A,R7
0012 C3                CLR     C
0013 9E                SUBB    A,R6
0014 500B              JNC     ?C0032
                                           ; SOURCE LINE # 221
0016 E500        R     MOV     A,eten
0018 75F00A            MOV     B,#0AH
001B A4                MUL     AB
001C F500        R     MOV     eten,A
001E 0F                INC     R7
001F 80EC              SJMP    ?C0031
0021         ?C0032:
                                           ; SOURCE LINE # 223
0021 E500        R     MOV     A,dec_byte
0023 8500F0      R     MOV     B,eten
0026 84                DIV     AB
0027 F500        R     MOV     hdig,A
                                           ; SOURCE LINE # 224
0029 20000F      R     JB      fhdig,?C0034
002C 700D              JNZ     ?C0034
002E E500        R     MOV     A,digi
0030 6401              XRL     A,#01H
0032 6007              JZ      ?C0034
                                           ; SOURCE LINE # 225
0034 7F20              MOV     R7,#020H
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 14  

0036 120000      R     LCALL   _DisplayChar
0039 8007              SJMP    ?C0035
003B         ?C0034:
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
003B AF00        R     MOV     R7,hdig
003D 120000      R     LCALL   _DspHexNibble
                                           ; SOURCE LINE # 229
0040 D200        R     SETB    fhdig
                                           ; SOURCE LINE # 230
0042         ?C0035:
                                           ; SOURCE LINE # 231
0042 E500        R     MOV     A,hdig
0044 8500F0      R     MOV     B,eten
0047 A4                MUL     AB
0048 FF                MOV     R7,A
0049 C3                CLR     C
004A E500        R     MOV     A,dec_byte
004C 9F                SUBB    A,R7
004D F500        R     MOV     dec_byte,A
                                           ; SOURCE LINE # 232
004F 1500        R     DEC     digi
                                           ; SOURCE LINE # 233
0051 80B1              SJMP    ?C0029
                                           ; SOURCE LINE # 234
0053         ?C0036:
0053 22                RET     
             ; FUNCTION _DspDecByte (END)

             ; FUNCTION _DspHexNibble (BEGIN)
                                           ; SOURCE LINE # 239
;---- Variable 'nibb_hex' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
0000 7430              MOV     A,#030H
0002 2F                ADD     A,R7
0003 FF                MOV     R7,A
                                           ; SOURCE LINE # 242
0004 D3                SETB    C
0005 9439              SUBB    A,#039H
0007 4004              JC      ?C0037
                                           ; SOURCE LINE # 243
0009 7407              MOV     A,#07H
000B 2F                ADD     A,R7
000C FF                MOV     R7,A
000D         ?C0037:
                                           ; SOURCE LINE # 244
000D 020000      R     LJMP    _DisplayChar
             ; FUNCTION _DspHexNibble (END)

             ; FUNCTION _DisplayChar (BEGIN)
                                           ; SOURCE LINE # 250
;---- Variable 'chr' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
0000 020000      R     LJMP    _LcdWriteData
             ; FUNCTION _DisplayChar (END)

             ; FUNCTION ClearDisplay (BEGIN)
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 265
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 15  

0000 E4                CLR     A
0001 F500        R     MOV     j,A
0003         ?C0040:
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
0003 AD00        R     MOV     R5,j
0005 E4                CLR     A
0006 FF                MOV     R7,A
0007 120000      R     LCALL   _LocateCursor
                                           ; SOURCE LINE # 268
000A E4                CLR     A
000B F500        R     MOV     i,A
000D         ?C0043:
                                           ; SOURCE LINE # 269
000D 7F20              MOV     R7,#020H
000F 120000      R     LCALL   _DisplayChar
0012 0500        R     INC     i
0014 E500        R     MOV     A,i
0016 C3                CLR     C
0017 9410              SUBB    A,#010H
0019 40F2              JC      ?C0043
                                           ; SOURCE LINE # 270
001B         ?C0042:
001B 0500        R     INC     j
001D E500        R     MOV     A,j
001F C3                CLR     C
0020 9402              SUBB    A,#02H
0022 40DF              JC      ?C0040
                                           ; SOURCE LINE # 272
0024         ?C0046:
0024 22                RET     
             ; FUNCTION ClearDisplay (END)

             ; FUNCTION _ClearRowDisplay (BEGIN)
                                           ; SOURCE LINE # 277
;---- Variable 'row' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 281
0002 E4                CLR     A
0003 FF                MOV     R7,A
0004 120000      R     LCALL   _LocateCursor
                                           ; SOURCE LINE # 282
0007 E4                CLR     A
0008 F500        R     MOV     i,A
000A         ?C0047:
                                           ; SOURCE LINE # 283
000A 7F20              MOV     R7,#020H
000C 120000      R     LCALL   _DisplayChar
000F 0500        R     INC     i
0011 E500        R     MOV     A,i
0013 C3                CLR     C
0014 9410              SUBB    A,#010H
0016 40F2              JC      ?C0047
                                           ; SOURCE LINE # 284
0018         ?C0050:
0018 22                RET     
             ; FUNCTION _ClearRowDisplay (END)

             ; FUNCTION CursorShift (BEGIN)
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 16  

                                           ; SOURCE LINE # 291
0000 300004      R     JNB     dir,?C0051
0003 7F14              MOV     R7,#014H
0005 8002              SJMP    ?C0052
0007         ?C0051:
0007 7F10              MOV     R7,#010H
0009         ?C0052:
0009 020000      R     LJMP    _LcdWriteCommand
             ; FUNCTION CursorShift (END)

             ; FUNCTION InitLcdCommand (BEGIN)
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
0000 7F28              MOV     R7,#028H
0002 120000      R     LCALL   _LcdWriteCommand
                                           ; SOURCE LINE # 298
0005 AF00        R     MOV     R7,DspCtrlCommand
0007 120000      R     LCALL   _LcdWriteCommand
                                           ; SOURCE LINE # 299
000A 7F01              MOV     R7,#01H
000C 020000      R     LJMP    _LcdWriteCommand
             ; FUNCTION InitLcdCommand (END)

             ; FUNCTION _LcdWriteCommand (BEGIN)
                                           ; SOURCE LINE # 305
0000 8F00        R     MOV     cmd,R7
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 308
0002 120000      R     LCALL   _OutLcdPort
                                           ; SOURCE LINE # 309
0005 C280              CLR     LCD_RS
                                           ; SOURCE LINE # 310
0007 120000      R     LCALL   LcdEnPulse
                                           ; SOURCE LINE # 313
000A E500        R     MOV     A,cmd
000C C4                SWAP    A
000D 54F0              ANL     A,#0F0H
000F F500        R     MOV     cmd,A
                                           ; SOURCE LINE # 314
0011 FF                MOV     R7,A
0012 120000      R     LCALL   _OutLcdPort
                                           ; SOURCE LINE # 315
0015 C280              CLR     LCD_RS
                                           ; SOURCE LINE # 316
0017 020000      R     LJMP    LcdEnPulse
             ; FUNCTION _LcdWriteCommand (END)

             ; FUNCTION _LcdWriteData (BEGIN)
                                           ; SOURCE LINE # 322
0000 8F00        R     MOV     dat,R7
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 325
0002 120000      R     LCALL   _OutLcdPort
                                           ; SOURCE LINE # 326
0005 D280              SETB    LCD_RS
                                           ; SOURCE LINE # 327
0007 120000      R     LCALL   LcdEnPulse
                                           ; SOURCE LINE # 330
000A E500        R     MOV     A,dat
000C C4                SWAP    A
000D 54F0              ANL     A,#0F0H
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 17  

000F F500        R     MOV     dat,A
                                           ; SOURCE LINE # 331
0011 FF                MOV     R7,A
0012 120000      R     LCALL   _OutLcdPort
                                           ; SOURCE LINE # 332
0015 D280              SETB    LCD_RS
                                           ; SOURCE LINE # 333
0017 020000      R     LJMP    LcdEnPulse
             ; FUNCTION _LcdWriteData (END)

             ; FUNCTION LcdEnPulse (BEGIN)
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 343
0000 D281              SETB    LCD_EN
                                           ; SOURCE LINE # 344
;---- Variable 'i' assigned to Register 'R7' ----
0002 E4                CLR     A
0003 FF                MOV     R7,A
0004         ?C0057:
0004 0F                INC     R7
0005 BF08FC            CJNE    R7,#08H,?C0057
0008         ?C0058:
                                           ; SOURCE LINE # 345
0008 C281              CLR     LCD_EN
                                           ; SOURCE LINE # 346
000A E4                CLR     A
000B FF                MOV     R7,A
000C         ?C0060:
000C 0F                INC     R7
000D BF08FC            CJNE    R7,#08H,?C0060
                                           ; SOURCE LINE # 347
0010         ?C0063:
0010 22                RET     
             ; FUNCTION LcdEnPulse (END)

             ; FUNCTION _OutLcdPort (BEGIN)
                                           ; SOURCE LINE # 352
;---- Variable 'dat' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
0000 EF                MOV     A,R7
0001 30E703            JNB     ACC.7,?C0064
0004 D3                SETB    C
0005 8001              SJMP    ?C0065
0007         ?C0064:
0007 C3                CLR     C
0008         ?C0065:
0008 9285              MOV     LCD_B7,C
                                           ; SOURCE LINE # 355
000A EF                MOV     A,R7
000B 30E603            JNB     ACC.6,?C0066
000E D3                SETB    C
000F 8001              SJMP    ?C0067
0011         ?C0066:
0011 C3                CLR     C
0012         ?C0067:
0012 9284              MOV     LCD_B6,C
                                           ; SOURCE LINE # 356
0014 EF                MOV     A,R7
0015 30E503            JNB     ACC.5,?C0068
0018 D3                SETB    C
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 18  

0019 8001              SJMP    ?C0069
001B         ?C0068:
001B C3                CLR     C
001C         ?C0069:
001C 9283              MOV     LCD_B5,C
                                           ; SOURCE LINE # 357
001E EF                MOV     A,R7
001F 30E403            JNB     ACC.4,?C0070
0022 D3                SETB    C
0023 8001              SJMP    ?C0071
0025         ?C0070:
0025 C3                CLR     C
0026         ?C0071:
0026 9282              MOV     LCD_B4,C
                                           ; SOURCE LINE # 358
0028 22                RET     
             ; FUNCTION _OutLcdPort (END)

             ; FUNCTION _Delayms (BEGIN)
                                           ; SOURCE LINE # 367
;---- Variable 'ms' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 370
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
0003         ?C0073:
0003 C3                CLR     C
0004 ED                MOV     A,R5
0005 9F                SUBB    A,R7
0006 EC                MOV     A,R4
0007 9E                SUBB    A,R6
0008 5015              JNC     ?C0079
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
;---- Variable 'j' assigned to Register 'R2/R3' ----
000A E4                CLR     A
000B FB                MOV     R3,A
000C FA                MOV     R2,A
000D         ?C0076:
000D 0B                INC     R3
000E BB0001            CJNE    R3,#00H,?C0081
0011 0A                INC     R2
0012         ?C0081:
0012 EB                MOV     A,R3
0013 64A0              XRL     A,#0A0H
0015 4A                ORL     A,R2
0016 70F5              JNZ     ?C0076
                                           ; SOURCE LINE # 373
0018         ?C0075:
0018 0D                INC     R5
0019 BD0001            CJNE    R5,#00H,?C0082
001C 0C                INC     R4
001D         ?C0082:
001D 80E4              SJMP    ?C0073
                                           ; SOURCE LINE # 374
001F         ?C0079:
001F 22                RET     
             ; FUNCTION _Delayms (END)

C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 19  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_ClearRowDisplay . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  row. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
CursorShift. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dir. . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
DspCtrlCommand . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0000H  1
_DspLocHexByte . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  loc_x. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  loc_y. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  lcm_hex. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_DspHexNibble. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  nibb_hex . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_LcdWriteData. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
LCD_B4 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
LCD_B5 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
LCD_B6 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
LCD_Startup. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
LCD_B7 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
_DspLocString. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  loc_x. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  loc_y. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  str. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
ClearDisplay . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  j. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
LCD_EN . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
_DspLocChar. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  loc_x. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  loc_y. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  c. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_DspDecByte. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dec_byte . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  digi . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  fhdig. . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  hdig . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  eten . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  tcnt . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_Delayms . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ms . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0006H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  j. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
LcdEnPulse . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_DspDecWord. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dec_word . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  digi . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  fhdig. . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  hdig . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  eten . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0004H  2
  tcnt . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
_DisplayString . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str. . . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  3
LCD_RS . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
_DisplayChar . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  chr. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
C51 COMPILER V9.00   LCM                                                                   08/04/2016 14:12:05 PAGE 20  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


CursorDisplay. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cursw. . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
_LocateCursor. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  loc_x. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  loc_y. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_DspHexByte. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  lcm_hex. . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_LcdWriteCommand . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  cmd. . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
_DspLocDecByte . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  loc_x. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  loc_y. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  dec_byte . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  digi . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0003H  1
  fhdig. . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
_DspHexWord. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  lcm_hex. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
InitLcdCommand . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_DspLocDecWord . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  loc_x. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0007H  1
  loc_y. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0005H  1
  dec_word . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  digi . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0004H  1
  fhdig. . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
_OutLcdPort. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  dat. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    702    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      35
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       6
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
